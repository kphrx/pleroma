name: docker

on:
  push:
    branches:
      - 'pl.kpherox.dev'
  pull_request:

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.metadata.outputs.build-args }}
      tags: ${{ steps.metadata.outputs.tags }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - id: metadata
        run: |
          DOCKER_IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}
          VERSION=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION,,}"
          if [[ $GITHUB_REF = refs/tags/* ]] && [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:stable-latest"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          if [[ $GITHUB_REF != refs/tags/* ]] && [[ "${{ github.event_name }}" = "push" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${SHORT_SHA}"
          fi
          BUILD_ARGS="VCS_REF=${SHORT_SHA}\nBUILD_DATE=$(date --utc -Iseconds)"
          echo ::set-output name=build-args::${BUILD_ARGS}
          echo ::set-output name=tags::${TAGS}

  build:
    needs: metadata
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: amd64
          - runner: self-hosted
            arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: false
          load: false
          target: build
          cache-from: type=gha,scope=build
          cache-to: type=gha,scope=build,mode=max

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: false
          cache-from: |
            type=gha,scope=prod
            type=gha,scope=build
          cache-to: type=gha,scope=prod,mode=max
          build-args: ${{ needs.metadata.outputs.build-args }}
          tags: pleroma:${{ matrix.arch }}
          outputs: type=docker,dest=/tmp/pleroma-${{ matrix.arch }}.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: pleroma-${{ matrix.arch }}
          path: /tmp/pleroma-${{ matrix.arch }}.tar
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: [metadata, build]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load images
        run: |
          docker load --input /tmp/pleroma-arm64.tar
          docker load --input /tmp/pleroma-amd64.tar
          docker image ls -a

      - name: Push amended manifest
        run: |
          docker manifest create ${{ needs.metadata.outputs.tags }} --amend pleroma:arm64 --amend pleroma:amd64
          docker manifest push ${{ needs.metadata.outputs.tags }}
